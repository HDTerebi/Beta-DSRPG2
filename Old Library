local function initLibrary()
    local library = {flags = {}, callbacks = {}, rainbowI = 0};

    local GetService = game.GetService;
    local Players = GetService(game, "Players");
    local RunService = GetService(game, "RunService");
    local CoreGui = GetService(game, "CoreGui");
    local TweenService = GetService(game, "TweenService");
    local UserInputService = GetService(game, "UserInputService");

    local LocalPlayer = Players.LocalPlayer;

    do -- library funcs
        coroutine.wrap(function()
            while true do
                for i = 0, 359 do
                    library.rainbowI = i / 359;
                    library.rainbowVal = Color3.fromHSV(i / 359, 1, 1);
                    wait();
                end;
            end;
        end)();

        function library:Create(class, data)
            local obj = Instance.new(class);
            for i, v in next, data do
                if i ~= 'Parent' then
                    if typeof(v) == "Instance" then
                        v.Parent = obj;
                    else
                        obj[i] = v
                    end
                end
            end

            obj.Parent = data.Parent;
            return obj;
        end;

        function library:Dragger(main, second)
            local dragging;
            local dragInput;
            local dragStart;
            local startPos;

            local function update(input)
                local delta = input.Position - dragStart;
                second:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y),'Out','Sine',0.01,true);
            end;

            main.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true;
                    dragStart = input.Position;
                    startPos = second.Position;

                    repeat wait() until input.UserInputState == Enum.UserInputState.End;
                    dragging = false;
                end;
            end);

            main.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    dragInput = input;
                end;
            end);

            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if input == dragInput and dragging then
                    update(input);
                end;
            end);
        end;

        function library:Tween(instance, properties, callback)
            local callback = callback or function() end;
            local time = properties.time;
            properties.time = nil;
            local anim = TweenService:Create(instance, TweenInfo.new(time), properties);

            anim.Completed:Connect(callback);
            anim:Play();
            return anim;
        end;

        local ui_Settings = {
            mainColor = Color3.fromRGB(36, 36, 36);
            bottomColor = Color3.fromRGB(34, 34, 34);
            borderColor = Color3.fromRGB(42, 42, 42);
            scrollingBarColor = Color3.fromRGB(115, 41, 255);
            toggleColor = Color3.fromRGB(34, 34, 34);
            toggleBorderColor = Color3.fromRGB(102, 41, 255);
            boxColor = Color3.fromRGB(32, 32, 32);
            boxBorderColor = Color3.fromRGB(102, 41, 255);
            gradientColorSection = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(102, 41, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(122, 41, 255))};
            gradientColor = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(102, 41, 255)), ColorSequenceKeypoint.new(0, Color3.fromRGB(142, 61, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(210, 74, 255))};
            shadowGradientColor = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 20)), ColorSequenceKeypoint.new(1, Color3.fromRGB(36, 36, 36))};
        };

        UserInputService.InputBegan:Connect(function(input)
            for i, v in next, library.flags do
                if(v == input.KeyCode) then
                    library.callbacks[i]();
                elseif(v == input.UserInputType) then
                    library.callbacks[i]();
                end;
            end;
        end);

        local gui = Instance.new("ScreenGui", CoreGui);
        gui.Enabled = false;
        library.gui = gui;

	UserInputService.InputBegan:Connect(function(Input, gameProcessedEvent)
    	if gameProcessedEvent then return end

    	if Input.KeyCode == Enum.KeyCode.RightAlt then
        	gui.Enabled = not gui.Enabled
    	end
